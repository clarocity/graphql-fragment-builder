
enum OrderStatus {
    QUEUED
    ACCEPTED
    PENDING
    SHIPPED
    CLOSED
    CANCELED
}

type Order {
    id: ID!
    dateCreated: Date
    createdby: ID
    creator: User
    client: Client
    status: OrderStatus
    address: Address
}

scalar Date

enum UserType {
    ADMIN
    CLIENT
}

interface User {
    id: ID!
    name: String
    email: String!
    type: UserType
}

type AdminUser implements User {
    id: ID!
    name: String
    email: String!
    type: UserType
    permissions: AdminPermissions
}

type ClientUser implements User {
    id: ID!
    name: String
    email: String!
    type: UserType
    client: Client
}

type Client {
    id: ID!
    name: String
    address: Address
    users: [ClientUser]
    orders: [Order]
}

type Agent {
    id: ID!
    name: String
    address: Address
}

union ThirdParty = Client | Agent

type AdminPermissions {
    create: Boolean
    cancel: Boolean
    approve: Boolean
}

type Address {
    address1: String
    address2: String
    city: String
    state: String
    zip: String
}

type Query {
    Client(id: ID!): Client
    User(id: ID!): User
}

type Unused {
    nothing: Int
}

extend type Query {
    Order(id: ID!): Order
}

input AddressInput {
    address1: String!
    address2: String
    city: String
    state: String
    zip: String!
}

type Mutation {
    createOrder (
        by: ID!
        for: ID!
        address: AddressInput
    ): Order
    changeOrderStatus(id: ID!, status: OrderStatus!): Order
}
